------------------------------------------------------------
스프링 AOP (Aspect Oriented Programming) : 관점 지향 프로그래밍
	- 공통은 Spring Container에게 맡기고 개발자는 핵심 로직만 신경 쓰자~!
	- (위키제공)공통의 관심사항을 적용해서 발생하는 의존관계의 복잡성과 코드 중복을 해소해 주는 프로그래밍 기법
------------------------------------------------------------
- Advice 	: What (공통기능)
- Target 	: Advice가 적용되 객체 (핵심기능), target은 joinpint 여러개 묶여져있음. target method가 5개면 Joinpoint도 개
	- JoinPoint : n개 이상(like method...)
- Proxy 	: Advice를 Target 객체에 적용하면 생성되는 객체 (Target[생성되는객체] == 중개자)
- PointCut 	: 커트라인 지정. Where ( JoinPoint 중에 일부 적용되는것. ex. 4개만)
- Aspect 	: Advice(Waht) + PointCut(Where)  + When(언제) // == Advisor : 얘는 간편하게 사용 가능. Aspect는 여러줄 처리.
	- When[5] - (앞) before, 
				(뒤)after(finally)/after-throwing(exception발생)/after-returning(try)
				(method앞뒤)around(ex.수행시간체크) 
- Weaving 	: 공통을 핵심에 적용하는 절차.
		  	: Target(객체)에 Aspect를 적용해서 Proxy 객체를 생성하는 절차. 


------------------------------------------------------------------------
AspectJ 표기법
------------------------------------------------------------------------
expression="execution( ____________ )"

- 풀 패키지 명 다 작성해야함.
- 접근자는 작성 안할 경우, public default

접근자	리턴타입	.패키지        .클래스   .메소드명 (매개변수타입)
public	int		com.lec06.aop.baordDAO.boardInsert(BoardVO)
public	int		com.lec06.aop.baordDAO.replyInsert(ReplyVO)
-> public	int		com.lec06.aop.baordDAO.*Insert(*VO) == 위 2개 공통 사용 가능하도록 처리 된 것.


public	int			com.lec06.aop.BoardDAO.boardInsert(BoardVO)
public	int			com.lec06.aop.BoardDAO.replyInsert(ReplyVO)
public	boardVO		com.lec06.aop.BoardDAO.selectOne(int)
------------------------------------------------------------------------------------
-> public	*		com.lec06.aop.BoardDAO.*(*)		// *[=메서드자리](*[파라미터자리]) 


public	int			com.lec06.aop.BoardDAO.boardInsert(BoardVO)
public	int			com.lec06.aop.BoardDAO.replyInsert(ReplyVO)
public	boardVO		com.lec06.aop.BoardDAO.selectOne(int, int)
------------------------------------------------------------------------------------
-> public	*		com.lec06.aop.BoardDAO.*(*, ..)		// (파라미터 기본은 하나 있어서 *, 뒤에는 있어도 없어도 상관 없음 = ..)


public	int			com.lec06.aop.BoardDAO.boardInsert(BoardVO)
public	int			com.lec06.aop.BoardDAO.replyInsert(ReplyVO)
public	boardVO		com.lec06.aop.BoardDAO.selectOne(int)
public	List		com.lec06.aop.BoardDAO.select()
------------------------------------------------------------------------------------
-> public	*		com.lec06.aop.BoardDAO.*(..)		// *[=메서드자리](..[파라미터자리, 있어도 그만 없어도 그만]) 



public	int			com.lec06.aop.BoardDAO.boardInsert(BoardVO)
public	int			com.lec06.aop.BoardDAO.replyInsert(ReplyVO)
public	boardVO		com.lec06.aop.BoardDAO.selectOne(int)
public	List		com.lec06.aop.BoardDAO.select()
public	void		com.lec01.sample.DAOCallTest.myprint()
------------------------------------------------------------------------------------
-> public	*		com.*.*.*DAO*.*(..)


public	int			com.lec06.aop.BoardDAO.boardInsert(BoardVO)
public	int			com.lec06.aop.BoardDAO.replyInsert(ReplyVO)
public	boardVO		com.lec06.aop.BoardDAO.selectOne(int)
public	List		com.lec06.aop.BoardDAO.select()
public	void		com.lec01.sample.CallTest.myprint()
------------------------------------------------------------------------------------
-> public	*		com.*.*.*DAO*.*(..)


public	int			com.lec06.aop.BoardDAO.boardInsert(BoardVO)
public	int			com.lec06.aop.BoardDAO.replyInsert(ReplyVO)
public	boardVO		com.lec06.aop.BoardDAO.selectOne(int)
public	List		com.lec06.aop.BoardDAO.select()
public	void		com.lec01.sample.DAOCallTest.myprint()
public	void		com.kosta.CallTest.myprint()
------------------------------------------------------------------------------------
-> public	*		com..*.*(..)		// com.. 은 depth가 일치하지 않아도 상관 없음. 어떤 뎁스든 상관 없다.


예) execution(public Integer  com.edu.aoop.*.*.(*))
	접근제어자 : public 
	메서드리턴타입 : 리턴 타입이 Integer
	패키지 : com.edu.aop
	클래스 : 모든 클래스
	메서드 : 모든 메서드
	파라미터 : 1개


예) execution(		 *  com.edu...*.get*.(..))
	접근제어자 : public 
	메서드리턴타입 : 모든 타입
	패키지 : com.edu. depth 무관
	클래스 : 모든 클래스
	메서드 : get___()메서드
	파라미터 : 0개 ~ N개


예) execution(   	* com.edu..*.get*(..))
  	접근제어자 : public
 	메서드리턴타입 : 모든타입
 	패키지: com.edu. 뎁스무관 
 	클래스: 모든클래스
 	메서드 : get____()
 	파라미터 : 0개~N개
 	
 	
예) execution(		* com.edu.aop..*Service.*(..))
  	접근제어자 : public
 	메서드리턴타입 : 모든타입
 	패키지: com.edu.aop. 뎁스무관 
 	클래스: ___Service
 	메서드 : 모든메서드
 	파라미터 : 0개~N개
 	
 	
예) execution(    * com.edu.aop.BoardService.*(..))
 	접근제어자 : public
 	메서드리턴타입 : 모든타입
 	패키지: com.edu.aop만 
 	클래스: BoardService만
 	메서드 : 모든메서드
 	파라미터 : 0개~N개
 	
 	
예) execution(    * some*(*, *))
 	접근제어자 : public
 	메서드리턴타입 : 모든타입
 	패키지: 없음 
 	클래스: 없음
 	메서드 : some_____()
 	파라미터 : 2개
 	
 	
 	
 	

** 컬트롤러는 
- @Controller 라는 인터페이스 사용하기 때문에 스프링은 인터페이스 있다.
-- 스프링 시작 : 다형성 = 부모가 인터페이스. 인터페이스가 있어야 함.

------------------------------------------------------------------------------------
AOP 프록시 적용 방식
	JDK 동적 프록시(spring default)  vs. CGLIB프록시		: 인터페이스 기반이냐 아니냐 기준.
------------------------------------------------------------------------------------
- JDK 동적 프록시(스프링 기본)
	- 인터페이스를 구현한 객체(class method)에만 AOP 적용되는 방식.

- CGLIB 프록시
	- GBLIB() : 코드 생성 라이브러리로서 런타임에 동적에서 
	- 인터페이스가 없는 클래스 객체에 AOP 적용되는 방식.
  	
--------------------------------------------------------------
AOP 설정 방식
스프링 : **@Anotation 기반  vs.  XML 기반
POJO : 상속 받아 커스텀화
--------------------------------------------------------------
	<aop:aspectj-autoproxy />
		: 스프링에서 AOP 사용하겠다. == base package에서 @Aspect 찾아서 @Aspect 기반으로 하는 자동 프락시 활성화.
		: @Aspect가 붙은 클래서(==공통 기능이 들어간 클래스) 다 찾아서 해당 빈을 프록시 객체로 감싸라.(=bean으로 메모리에 등록되면 빈을 프록시 객체로 감싸라.)
		: dafault JDK동적 프록시 사용. (인터페이스 있는 클래스만 AOP적용이 가능함)
		
	<aop:aspectj-autoproxy proxy-target-class="true" />  -- 설정만 이것.
		: proxy-target-class="true"
		: 프록시 생성 방식 지정. 즉, 클래스 써도 좋다라는 뜻.
		: CGLIB(Code Generator Library)프록시 방식 사용하겠다. (인터페이스 업슨 클래스에도 AOP 적용 가능.)
		: 이 설정 사용 시, 사전에 pom.xml에 추가 의존성 CGLIB.jar 파일 설치(필수) 후 해당 설정사용 할 것! == 라이브러리 설치 필수

... 나머지 타입은 전부 어노테이션 처리 해야함.
	<적용할 것들>
	@Aspect
	@PointCut
	@Advice
	@Before
	@AfterReturning
	@AfterThrowing
	@Around

-- proceed() 가로챈 정보 다 가지고 있음.

--------------------------------------------------------------
AOP 설정 방식
스프링 : @Anotation 기반  vs. **XML 기반
POJO : 상속 받아 커스텀화
--------------------------------------------------------------
<beans ~~~>
	// 공통 기능 :: 들어간 클래스를 인스턴스 초기화 
	<bean id="MY_ADVICE_What_공통" class="com.lec04.di.board.MyOracleConnection" />
	// 핵심 기능 :: 들어간 클래스를 인스턴스 초기화
	<bean id="boardDAO" class="co.lec04.di.board.BoardDAO" />	
	// id="boardService" 알아보기 쉽게 부모타입과 동일하도록 처리가능.
	
	// 공통과 핵심을 가지고 AOP 어떻게 설정하는 지 작성함.(아래)
	<aop:config>
		<aop:aspect id="MY_What_Where_When" ref="MY_ADVICE_What_"> -- what : 공통 뭘 해야하는 지 안다.			
			-- where : 핵심로직의 어디에 적용할지			
	    	<aop:pointcut id="MY_핵심로직_DAO메서드" expression="execution(public * com.lec04..*DAO.*(..))" />	
	   		
	   		-- when : execution(public * com.lec04..*DAO.*(..)) 실행 시, 앞? 뒤? 앞뒤? 언제 실행할지 
	   		<aop:before pointcut-ref="MY_핵심로직_DAO메서드" method="oracleConn" />					--
	   		<aop:after pointcut-ref="MY_핵심로직_DAO메서드" method="oracleClose" />					--
		</aop:aspect>
	</aop:config>
	

</beans>






##################################################################################################
 - JDK 동적 프록시 = 자바 기반의 자바의 reflect.Proxy 클래스 사용. 실행될때 생성됨. 즉, 런타임 될 때.
##################################################################################################
  - java.lang.reflect.Proxy 클래스 사용
  - 런타임에 인터페이스를 구현하는 프록시 객체를 동적으로 생성
  - 프록시 객체는 대상객체(target object)와 동일한 인터페이스를 구현하며, 메서드 호출을 가로채어 추가기능(Advice)을 수행
  - 빈을 주입받을 때 실제 빈 대신 프록시 객체가 반환 -- 프록시가 Impl(target class)의 메서드 호출을 가로채어 어드바이스 적용
  
  1) AOP 설정
  		: 애스펙트(Aspect : what) / 어드바이스(Advice : when) 정의
  		
		@Configuration
		@EnableAspectJAutoProxy  //AnnotationAwareAspectJAutoProxyCreator라는 빈 후처리기(Bean Post Processor)를 등록
								 //애플리케이션 컨텍스트에 정의된 빈을 스캔하여 AOP 관련 설정을 적용
		public class AppConfig {
		    @Bean
		    public MyAspect myAspect() {
		        return new MyAspect();
		    }
		
		    @Bean
		    public MyService myService() {
		        return new MyServiceImpl();
		    }
		}

  2) 빈 후처리기 등록 @EnableAspectJAutoProxy 
  		: 스프링 컨텍스트는 AnnotationAwareAspectJAutoProxyCreator라는 빈 후처리기(Bean Post Processor)를 등록
  		               --> 빈을 스캔하여 AOP관련 설정 적용
  		               
  3) 프록시 생성  
  		: 빈 후처리기는 빈이 초기화될 때 인터페이스 기반 프록시를 생성
          a) 초기화 후처리	: 빈이 초기화 후, AnnotationAwareAspectJAutoProxyCreator는 해당 빈이 AOP 대상인지 검사
		  b) 프록시 생성 	: 대상 빈이 AOP 대상인 경우, JDK 동적 프록시를 사용하여 인터페이스 기반 프록시 객체 생성
		
		MyService proxy = (MyService) Proxy.newProxyInstance(
		    MyService.class.getClassLoader(),    --- 인터페이스 로드
		    new Class<?>[] { MyService.class },  --- 동일한 객체 동적 생성 
		    new MyInvocationHandler(target)      --- 메서드 가로채기 invoke()오버라이딩해 어드바이스 로직 수행
		);
		
  4) InvocationHandler 구현
  	    : 프록시 객체는 메서드 호출을 가로채기 위해 InvocationHandler 사용
        : invoke 메서드를 구현하여 실제 대상 객체의 메서드를 호출하기 전에 어드바이스 로직 수행
        
        public class MyInvocationHandler implements InvocationHandler {
		    private final Object target;
		    public MyInvocationHandler(Object target) {
		        this.target = target;
		    }
		
		    @Override
		    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		        // Before advice
		        System.out.println("Before method: " + method.getName());
		
		        // Invoke actual method on target
		        Object result = method.invoke(target, args);
		
		        // After advice
		        System.out.println("After method: " + method.getName());
		
		        return result;
		    }
		}
  5) 프록시 객체 반환
	  : 프록시 객체는 스프링 컨텍스트에 의해 관리
	  : 클라이언트 코드가 빈을 주입받을 때 실제 빈 대신 프록시 객체가 반환
	  : 이 프록시 객체는 메서드 호출을 가로채어 어드바이스를 적용
	  
	  
	   //--------------------------------------------------------------------------- 
	   // 스프링 AOP는 JDK 동적 프록시를 사용하여 인터페이스 기반 프록시를 생성하고, 이를 통해 AOP 기능을 제공
	   // MyServiceImpl 객체 대신 프록시 객체를 생성하여 빈으로 등록
	   // 이 프록시 객체는 performTask 메서드 호출을 가로채어 어드바이스 적용
	   //---------------------------------------------------------------------------
	    public interface MyService {
		    void performTask();
		}
		
		public class MyServiceImpl implements MyService {
		    @Override
		    public void performTask() {
		        System.out.println("Executing task...");
		    }
		}
		
		@Aspect
		public class MyAspect {
		    @Before("execution(* com.example.MyService.performTask(..))")
		    public void beforeTask(JoinPoint joinPoint) {
		        System.out.println("Before task: " + joinPoint.getSignature().getName());
		    }
		
		    @After("execution(* com.example.MyService.performTask(..))")
		    public void afterTask(JoinPoint joinPoint) {
		        System.out.println("After task: " + joinPoint.getSignature().getName());
		    }
		}

##################################################################################################  		
  - CGLIB(바이트코드를 조작하여 런타임에 새로운 클래스를 생성할 수 있게 해주는 라이브러리) 프록시 사용  
##################################################################################################  
  - 인터페이스를 구현하지 않는 클래스에도 프록시 적용
  - JDK 동적 프록시보다 약간 더 높은 성능
  - 추가 의존성: CGLIB.jar 추가  (대부분의 스프링 배포판에는 CGLIB가 포함)
  - 상속 기반: 상속을 기반으로 프록시를 생성하므로, final로 선언된 메서드는 프록시화할 수 없다
  
  대상 클래스의 서브클래스를 생성하고, 메서드 호출을 가로채어 추가 기능(Advice)을 수행
  
    1)  AOP 설정
    	@Configuration
		@EnableAspectJAutoProxy(proxyTargetClass = true)
		public class AppConfig {
		    @Bean
		    public MyAspect myAspect() {
		        return new MyAspect();
		    }
		
		    @Bean
		    public MyService myService() {
		        return new MyService();
		    }
		}

  2) 빈 후처리기 등록 @EnableAspectJAutoProxy(proxyTargetClass = true)
  		: 스프링 컨텍스트는 AnnotationAwareAspectJAutoProxyCreator라는 빈 후처리기(Bean Post Processor)를 등록
  		               --> 빈을 스캔하여 AOP관련 설정 적용

  3) 프록시 생성  
  		: 빈 후처리기는 빈이 초기화될 때 CGLIB를 사용하여 클래스 기반 프록시 객체를 생성
          a) 초기화 후처리	: 빈이 초기화 후, AnnotationAwareAspectJAutoProxyCreator는 해당 빈이 AOP 대상인지 검사
		  b) 프록시 생성 	: 대상 빈이 AOP 대상인 경우, GLIB를 사용하여 클래스 기반 프록시 객체를 생성
		
		
		★★★★★  CGLIB는 대상 클래스를 상속받아 (서브클래스를 동적으로 생성) ★★★★★★
		Enhancer enhancer = new Enhancer();
		enhancer.setSuperclass(MyService.class);      ------------------ (부모Service클래스 상속받아 차일드클래스 동적 생성)
		enhancer.setCallback(new MyMethodInterceptor(target));   ------- 메서드 호출을 가로채고 어드바이스 로직 적용
		MyService proxy = (MyService) enhancer.create();
		
  4) MethodInterceptor 구현
  	    : 프록시 객체는 메서드 호출을 가로채기 위해 MethodInterceptor 사용
        : intercept 메서드를 구현하여 실제 대상 객체의 메서드를 호출하기 전에 어드바이스 로직 수행
        
        public class MyMethodInterceptor implements MethodInterceptor {
		    private final Object target;
		    public MyMethodInterceptor(Object target) {
		        this.target = target;
		    }
		
		    @Override
		  //public Object invoke   (Object proxy, Method method, Object[] args)                    throws Throwable {
		    public Object intercept(Object obj,   Method method, Object[] args, MethodProxy proxy) throws Throwable {
		        // Before advice
		        System.out.println("Before method: " + method.getName());
		
		        // Invoke actual method on target
		     // Object result = method.invoke(target, args);
		        Object result = proxy.invoke (target, args);
		        
		        // After advice
		        System.out.println("After method: " + method.getName());
		
		        return result;
		    }
		}
		
  5) 프록시 객체 반환
	  : 프록시 객체는 스프링 컨텍스트에 의해 관리
	  : 클라이언트 코드가 빈을 주입받을 때 실제 빈 대신 프록시 객체가 반환
	  : 이 프록시 객체는 메서드 호출을 가로채어 어드바이스를 적용
	  		
	  		
	  //--------------------------------------------------------------------------- 
	  // MyService 클래스는 인터페이스를 구현하지 않습니다. 
	  // MyAspect 클래스는 해당 서비스 메서드의 전후에 실행될 어드바이스를 정
	  // 스프링은 MyService 객체 대신 CGLIB를 사용하여 프록시 객체를 생성하고, 이를 빈으로 등록합니다. 
	  // 이 프록시 객체는 performTask 메서드 호출을 가로채어 어드바이스를 적용
	  //---------------------------------------------------------------------------
	  //public interface MyService {
	  //	void performTask();
	  //}
		
	  //public class MyServiceImpl implements MyService {
	  // @Override	
		public class MyService {
		    public void performTask() {
		        System.out.println("Executing task...");
		    }
		}
		
		@Aspect
		public class MyAspect {
		    @Before("execution(* com.example.MyService.performTask(..))")
		    public void beforeTask(JoinPoint joinPoint) {
		        System.out.println("Before task: " + joinPoint.getSignature().getName());
		    }
		
		    @After("execution(* com.example.MyService.performTask(..))")
		    public void afterTask(JoinPoint joinPoint) {
		        System.out.println("After task: " + joinPoint.getSignature().getName());
		    }
		}	  	 






















